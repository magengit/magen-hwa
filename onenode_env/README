Package for setting up and runnng, for demo purposes, a magen instance
and associated demonstration application.

The setup consists of 6 containers running on a single *nix instance.
A. magen core services
   1. id service
   2. key service
   3. ingestion service
   4. policy service
B. magen core database
   1. mongo container shared by [A]
C. "hello, world" app to demonstrate how the core services work
   together.

Use of the package: From root of installing directory, run these commands.
    NOTE: onenode.sh outputs its steps. These are tagged with
          $progname ("onenode.sh: ...") for easier location in logging output.

1. create directory tree rooted at ~/magen_onenode, using the commmand
   examples below
   - command examples (run from repo)
         bash$ onenode_env/onenode-dist.sh install --build-from dockerimage
         bash$ onenode_en/onenode-dist.sh install --build-from dockerimage --host 10.1.1.2
   - directory tree contents:
     - ~/magen_onenode/magen_data/*
       - onenode.sh creates configuration files
       - above services create log files here
     - ~/magen_onenode/helper_scripts

   NOTES:
     - This step is run from cloned repo and sets up a sandbox under
       ~/magen_onenode.
     - This script (onenode.sh) is copied to the sandbox
     - Steps below are run from the sandbox copy, e.g.
             ~/magen_onenode/onenode.sh
       since those subcommands may assume configuration files are at a
       known directory tree location relative to the location of the
       onenode.sh script.
     - An old sandbox must be deleted prior to creating a new sandbox.
       On Linux, this may require sudo, since the docker containers that
       mount directories in the sandbox and create log files run as root.
     - Browser access to hwa:
       - The -host argument affects browser access to the hwa app
         - Without the -host argument, only a local browser will be able to
           access the hwa app (e.g. where the magen instance is running
           on a Mac and the browser accesses https://localhost:5002)
         - With the -host argument supplying the public hostname (or public
           ip address) of the magen instance, a remote browser will
           be able to access the hwa app, e..g  https://<host>:5002
       - in this demo environment, hwa itself and the id service use
         self-signed certificates, so the browser will raise a security
	 warning that the app's certificate cannot be verified and needs
	 to be manually accepted.
       - manual acceptance is needed twice: one for hwa's self-signed cert
         and once for redirect to id service's self-signed cert.
      

2. Run onenode.sh (from directory created by install in step 1) to
   - create docker images
   - start running hwa application, magen services, and mongod.

      bash$ ~/magen_onenode/onenode.sh start

   The --update flag causes a check on underlying dependencies, e.g.
   a check for updated docker images on the docker image repo

      bash$ ~/magen_onenode/onenode.sh start --update

3. Shut down containers for above services (run from
   directory created by "onenode.sh create" in step 1)

      bash$ ~/magen_onenode/onenode.sh stop

4. Uninstall, including deleting ~/magen_onenode directory created in step 1)
   and onenode docker images created in step 2.

      bash$ ~/magen_onenode/onenode.sh uninstall

